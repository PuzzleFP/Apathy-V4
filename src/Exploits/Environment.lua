local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

local Atmosphere = true 
local AlwaysDay = false 

local Environment = {}
local UnderwaterEffects = {}

local InitialUnderwaterBlur = game:FindFirstChild("Blur", true).Size
local InitalUnderwaterAtmosphereDensity = game:FindFirstChild("WaterAtmosphere", true).Density

for _, Descendant in ipairs(game:GetDescendants()) do 
    if Descendant.Name == "WaterAtmosphere" or Descendant.Name == "Blur" then 
        table.insert(UnderwaterEffects, Descendant)
    end 
end 

function Environment.Atmosphere(State)
    Atmosphere = State
end 

function Environment.AlwaysDay(State) 
    AlwaysDay = State
end 

function Environment.OceanSurfaceTransparency(Transparency)
    local LakeCollisionPart = workspace.Terrain.LakeCollisionPart
    local LakeTop = workspace.Effects.LakeTop
    
    LakeCollisionPart.Transparency = Transparency
    LakeTop.Transparency = Transparency 
end 

function Environment.UnderwaterAtmosphere(IsUnderAtmosphere)
    for _, UnderwaterEffect in ipairs(UnderwaterEffects) do 
        if UnderwaterEffect.Name == "WaterAtmosphere" then 
            UnderwaterEffect.Density = IsUnderAtmosphere and InitalUnderwaterAtmosphereDensity or 0
        end 

        if UnderwaterEffect.Name == "Blur" then 
            UnderwaterEffect.Size = IsUnderAtmosphere and InitialUnderwaterBlur or 0
        end 

    end 

end 

coroutine.wrap(function()
    -- Changes to lighting are set on the server, and replicated
    -- A renderstepped loop is required to overwrite these changes before they replicate fully to the client

    RunService.RenderStepped:Connect(function()
        if AlwaysDay then 
            Lighting.ClockTime = 12
            Lighting.Brightness = 1
            Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
        end 

        if not Atmosphere then 
            Lighting.Atmosphere.Density = 0
            Lighting.Atmosphere.Haze = 0
        end  

    end
end)()

return Environment
