local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Client = ReplicatedStorage.Client
local Loader = Client.Loader 

-- Known source of where an anticheat instance is spawned from
local FollowMouse = require(Loader.FollowMouse)

-- Known module of where anticheat is used
local SwimController = require(Loader.SwimController)

-- Remove all anticheat function calls
for  _, Proto in ipairs(debug.getprotos(SwimController.onCharacter)) do 
    if debug.info(Proto, "n") == "fire" then 
        -- Force error the function

        local FlagUpvalues = debug.getupvalues(Proto)
        for UpvalueIndice, _ in ipairs(FlagUpvalues) do 
            debug.setupvalue(Proto, UpvalueIndice, nil)
        end 

        hookfunction(Proto, function() end)
    end 
end 

local ScriptEnvironment = getrenv()

local function IsAnticheatModule(Module)
    if Module.Name == "ModuleScript" then 
        return false 
    end 
    
    local ModuleReturnType = require(Module)

    if type(ModuleReturnType) ~= "function" then 
        return false 
    end 
    
    if #debug.getupvalues(ModuleReturnType) ~= 12 then 
        return false 
    end 
    
    return true
end 

ScriptEnvironment.require = function(Module) 
    local IsAnticheatModule = IsAnticheatModule(Module)

    if not IsAnticheatModule then 
        return require(Module)
    end 
    
    local AnticheatModule = require(Module)
    
    local AnticheatChecks = debug.getupvalues(AnticheatModule)

    for CheckIndice, Check in ipairs(AnticheatChecks) do 
        if debug.info(Check, "n") == "checkin" then 
            continue 
        end 
        
        hookfunction(Check, function() end)
        debug.setupvalue(AnticheatModule, CheckIndice, function() end)
    end 
    
    return AnticheatModule
end 

local NilInstances = getnilinstances()
local PreloadedAnticheatModule

for _, NilInstance in ipairs(NilInstances) do 
    if NilInstance:IsA("ModuleScript") then
        local IsAnticheatModule = IsAnticheatModule(NilInstance)

        if not IsAnticheatModule then 
            continue 
        end 

        PreloadedAnticheatModule = require(NilInstance)
    end 
end

if PreloadedAnticheatModule then 
    local AnticheatChecks = debug.getupvalues(PreloadedAnticheatModule)

    for _, Check in ipairs(AnticheatChecks) do 
        if debug.info(Check, "n") == "checkin" then 
            continue 
        end
        
        local CheckUpvalues = debug.getupvalues(Check)
        for CheckIndice in ipairs(CheckUpvalues) do 
            debug.setupvalue(Check, CheckIndice, nil)
        end 
    end 
end 
