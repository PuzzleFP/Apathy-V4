SetScriptContext("Player") 

local ContextActionService = game:GetService("ContextActionService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Client = Players.LocalPlayer

local NoclipProperties = OverlapParams.new()
NoclipProperties.FilterType = Enum.RaycastFilterType.Blacklist

local RecentlyCollisionAlteredParts = {}
local PartsAroundCharacterInPreviousHeartbeat = {}

local function GetPartsAroundCharacter()
    local Character = Client.Character 

    if not Character then 
        return 
    end 

    Noclip.FilterDescendantsInstances = { Character }

    return workspace:GetPartBoundsInBox(Character.HumanoidRootPart.CFrame, Vector3.new(5, 0.1, 5), NoclipProperties)
end 

local function GetFallDamageScript()
    local IsCharacter = Client.Character 

    if not IsCharacter then 
        return 
    end 

    return IsCharacter.FallDamageScript
end 

local function GetFallDamageHandler()
    local IsFallDamageScript = GetFallDamageScript()

    if not IsFallDamageScript then 
        return 
    end 

    return GetFunctionByNameFromScript(IsFallDamageScript, "OnStateChanged")
end 


local function GetLocalHumanoid()
    local Character = Client.Character

    if not Character then 
        return 
    end 

    return Character:FindFirstChildOfClass("Humanoid")
end 

local function CanChangeHumanoid()
    local LocalHumanoid = GetLocalHumanoid()

    if not LocalHumanoid then 
        return 
    end 

    if LocalHumanoid.Health <= 0 then 
        return 
    end 

    return LocalHumanoid 
end 

local Player = {}

function Player.SetFallDamage(State)
    SetGlobalSetting("Player", "FallDamage", State)

    local FallDamageHandler = GetFallDamageHandler()
    local LocalHumanoid = GetLocalHumanoid()
    
    for _, MatchingCallback in ipairs(FallDamageHandler) do 
        local RespectiveConnection = MatchCallbackToConnection(getconnections(LocalHumanoid.StateChanged), MatchingCallback)

        if State then 
            RespectiveConnection:Enable()
        else 
            RespectiveConnection:Disable()
        end 
    end 

end 

function Player.SetOceanDamage(State)
    SetGlobalSetting("OceanDamage", State)
    -- TODO: Write a persistant metatable hook module
    -- MetamethodHook.UpdateState("__namecall", "FallDamageHook", State)
end

function Player.SetWalkSpeed(Speed)
    SetGlobalSetting("WalkSpeed", Speed)
end 

function Player.SetSprintSpeed(Speed)
    SetGlobalSetting("SprintSpeed", Speed)
end

function Player.SetJumpPower(Power)
    SetGlobalSetting("JumpPower", Power)
end 

function Player.SetNoclip(State)
    SetGlobalSetting("Noclip", State)
end 

function Player.SetFly(State)
    SetGlobalSetting("Fly", State)
end 

function Player.SetForceSwim(State)
    SetGlobalSetting("Swim", State)
end 

ContextActionService:BindAction("OverrideSprint", function(_, State)
    if State == Enum.UserInputState.Begin then 
        SetGlobalSetting("CurrentHumanoidState", "Sprinting")
        return 
    end 

    SetGlobalSetting("CurrentHumanoidState", "Walking")

end, false, Enum.KeyCode.LeftShift)

local function UpdateCharacterState()
    RunService.Heartbeat:Connect(function()
        local Humanoid = CanChangeHumanoid()

        if not Humanoid then 
            return 
        end 

        local CurrentHumanoidState = GetGlobalSetting("CurrentHumanoidState")

        if CurrentHumanoidState == "Walking" then 
            Humanoid.WalkSpeed = GetGlobalSetting("WalkSpeed") 
            return 
        end 

        if CurrentHumanoidState == "Sprinting" then 
            Humanoid.WalkSpeed = GetGlobalSetting("SprintSpeed")  
            return 
        end 

        if GetGlobalSetting("ForceSwim") then 
            Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        end 

        if GetGlobalSetting("Noclip") then 
            print("Noclipping...")

            -- TODO: Finish this noclip
            --[[
            local PartsAroundCharacter = GetPartsAroundCharacter()

            local PartsNoLongerAroundCharacter = {}

            for _, Part in ipairs(PartsAroundCharacter) do 
                PartsAroundCharacter.CanCollide = false 

                for _, V in ipairs(CollisionAlteredInstances) do 
                    
                end 

            end 
            --]]
        end 

    end)
end 

task.spawn(UpdateCharacterState)

return Player 
