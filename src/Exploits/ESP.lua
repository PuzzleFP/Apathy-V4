local Players = game:GetService("Players")

local Map = workspace.Map

local ESP = {}
local HighlightContainers = {
    WellSpots = {},
    BeaconSpots = {},
    Beacons = {},
    Players = {}
}

local DrawingObjects = {
    Tracers = {},
    Boxes = {},
    CruiseMissleTrajectories = {}
}

-- Create containers for each type of highlight category
for HighlightContainerName, HighlightContainer in ipairs(HighlightContainers) do 
    local HighlightContainerInstance = Instance.new("Model")
    HighlightContainerInstance.Name = HighlightContainerName

    HighlightContainer["HighlightContainerInstance"] = HighlightContainerInstance
    HighlightContainerInstance.Parent = workspace
end 

-- Create highlights and parent them to each virtual container
-- Do not parent them to the container instance as that can be detcted
-- Setting the adornee to the container instance is sufficient enough, for the highlight to render all children

for _, HighlightContainer in ipairs(HighlightContainers) do 
    local Highlight = Instance.new("Highlight")
    HighlightContainer["Highlight"] = Highlight
end 

-- Cache all the well + beacon spots
for _, MapComponent in ipairs(Map:GetChildren()) do 
    -- Check if the map component is beacon block
    if MapComponent.Name == "ControlBlock1"  then 
        MapComponent.Parent = HighlightContainers.BeaconSpots.HighlightContainerInstance
    end 

    local Well = MapComponent:FindFirstChild("Pipe")

    if not Well then 
        continue
    end 

    local EnabledWell = Well:FindFirstChild("WellTopFlange")

    if not EnabledWell then 
        continue
    end 
 
    local PumpCFrame, PumpSize =  MapComponent:GetBoundingBox()
    local PumpsInRegion = workspace:GetPartBoundsInBox(PumpCFrame, PumpSize)

    local LocalClusterSize = 0

    for _, PotentialPumpInRegion in ipairs(PumpsInRegion) do 
        -- Confirm that it is a pump
        if not PotentialPumpInRegion:FindFirstAncestor("Pipe1") then 
            continue 
        end 

        LocalClusterSize += 1
    end 

    if LocalClusterSize >= GetGlobalSetting("ESP", "PumpClusterMinimumSize") then 
        -- Parent all viable well spots to the highlight container
        MapComponent.Parent = HighlightContainers.WellSpots.HighlightContainerInstance
    end 

end 

-- Parent all player models into the container instance
for _, Player in ipairs(Players:GetPlayers()) do 
    Player.Character.Parent = HighlightContainers.Players.HighlightContainerInstance
end 

-- Calling this function will attempt to sync all active instances of the esp to the current global state
local function SyncESP()
    local IsIgnoreLocalPlayer = GetGlobalSetting("ESP", "IgnoreLocalPlayer")
    local IsIgnoreTeam = GetGlobalSetting("ESP", "IgnoreTeam")

    if IsIgnoreLocalPlayer then 
        Client.Character.Parent = workspace 
    else 
        Client.Character.Parent = HighlightContainers.Players.HighlightContainerInstance
    end 

end 

local function ShowESP(State, Type, GlobalSettingName)
    local Highlight = HighlightContainers[Type].Highlight

    if State then 
        Highlight.Adornee = HighlightContainers[Type].HighlightContainerInstance
        SetGlobalSetting("ESP", GlobalSettingName, true)
    else 
        -- Set the adornee to nil to prevent the highlight from rendering
        Highlight.Adornee = nil 
        SetGlobalSetting("ESP", GlobalSettingName, false)
    end 
end 

local function RenderTracers()

end 

function ESP.ShowPumpClusters(State)
    ShowESP(State, "WellSpots", "PumpClusters")
end 

function ESP.SetClusterSize(Size)

end 

function ESP.ShowBeaconSpots(State)
    ShowESP(State, "BeaconSpots", "BeaconSpots")
end 

function ESP.ShowBeacons(State)
    ShowESP(State, "Beacons", "Beacons")
end 

function ESP.IgnoreLocalPlayer(State)
    SetGlobalSetting("ESP", "IgnoreLocalPlayer", State)
    SyncESP()
end 

function ESP.IgnoreTeam(State)
    SetGlobalSetting("ESP", "IgnoreLocalPlayer", State)
    SyncESP()
end 

function ESP.ShowChams(State)
    ShowESP(State, "Players", "Chams")
end 

function ESP.ShowTracers(State)

end 

function ESP.ShowBoxes(State)

end 

function ESP.ShowDistance(State)

end 

function ESP.ShowIridium(State)

end 

function ESP.ShowHealth(State)

end 

function ESP.ShowWeapon(State)

end 

function ESP.ShowCruiseMissleTrajectory(State)

end 

function ESP.ShowArtilleryTrajectory(State)

end 

return ESP 
